---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by riley.
--- DateTime: 2020/12/24 11:02 上午
---

local json = require("cjson")
local verify = require("libs.verify")
local method_map = {
    ['get'] = ngx.HTTP_GET, ['post'] = ngx.HTTP_POST, ['put'] = ngx.HTTP_PUT,
    ['delete'] = ngx.HTTP_DELETE, ['options'] = ngx.HTTP_OPTIONS, ['head'] = ngx.HTTP_HEAD,
    ['patch'] = ngx.HTTP_PATCH
}

local function ngx_say(status, is_json, code, message)
    ngx.status = status
    --ngx.header['Content-Type'] = 'application/json; charset=utf-8'
    --ngx.header['Access-Control-Allow-Origin'] = '*'
    --ngx.header['Access-Control-Allow-Methods'] = 'GET,DELETE,PUT,POST,OPTIONS'
    --ngx.header['Access-Control-Allow-Credentials'] = 'true'
    --ngx.header['Access-Control-Max-Age'] = '86400'
    --ngx.header['Access-Control-Allow-Headers'] = 'DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization,Sign-Sign,Sign-Nonce,Sign-Timestamp,Origin,Auth-Token,Ua-Custom'

    if is_json then
        ngx.say(json.encode({ code = code, message = message, details = {} }))
    else
        ngx.say(message)
    end

    ngx.exit(ngx.HTTP_OK)
end

local function get_request_params(request_body)
    if request_body['path'] == nil or request_body['method'] == nil
        or method_map[request_body['method']] == nil then
        ngx_say(460, true, 996, 'Request parameters error')
    end

    local body = request_body['body'] and json.encode( request_body['body']) or ''
    local request_uri = request_body['path']
    local method = method_map[request_body['method']]

    request_uri = string.sub(request_uri, 1, 1) == '/' and
        request_uri or '/' .. request_uri

    return request_uri, method, body, request_body['query']
end

ngx.ctx.need_encrypt = true
ngx.req.read_body()
local plaintext_body = ngx.req.get_body_data()
if plaintext_body == nil or plaintext_body == '' then
    ngx_say(460, true, 996, 'Request parameters error')
end

plaintext_body = verify:encrypt(plaintext_body)
local ok, request_body = pcall(json.decode, plaintext_body)
if not ok then
    ngx_say(460, true, 996, 'Request parameters error')
end

local uri, method, body, query = get_request_params(request_body)
local headers = ngx.req.get_headers()
local sign_by_client = headers['Sign-Sign']
if sign_by_client == nil then
    ngx.ctx.need_encrypt = false
    ngx_say(200, false, nil, "Welcome to XiaoQuan!")
end

local timestamp, nonce = headers['Sign-Timestamp'], headers['Sign-Nonce']
local sign_by_server = verify:get_sign(timestamp, nonce, plaintext_body)
if sign_by_server ~= sign_by_client then
    ngx_say(460, true, 998, "signature error")
end

ngx.req.set_header("Content-Type", "application/json; charset=utf-8")
ngx.req.set_body_data(body)
ngx.req.set_header("Content-Length", body:len())

ngx.req.set_method(method)
ngx.req.set_uri(uri, false)
if query ~= nil then
    ngx.req.set_uri_args(request_body['query'])
end
